{"version":3,"file":"index.modern.js","sources":["../src/utils.tsx","../src/SingleAvatar.tsx","../src/OverflowAvatar.tsx","../src/TooltipStyles.tsx","../src/AvatarGroup.tsx"],"sourcesContent":["const randomAvatarColor = [\"f44336\", \"e91e63\", \"9c27b0\", \"673ab7\", \"3f51b5\", \"2196f3\", \"009688\", \"ffc107\", \"ff9800\", \"ff5722\", \"795548\"];\n\nexport function colorFromName(name: string, avatarColors = randomAvatarColor) {\n    let hash = 0\n    let len = name.length;\n    for (let i = 0; i < len; i++) {\n        hash = ((hash << 5) - hash) + name.charCodeAt(i);\n        hash |= 0;\n    }\n    return avatarColors[Math.abs(hash) % avatarColors.length];\n}\n\nexport function cleanSearchParams(params: URLSearchParams) {\n    Array.from(params.entries()).forEach(([key, value]) => {\n        if (value === '') params.delete(key);\n    });\n}\n\n// Based on @mui/material/Paper\nexport const boxShadows: Record<number, string> = {\n    1: '0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)',\n    2: '0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)',\n    3: '0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)',\n    4: '0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)',\n    5: '0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)'\n}\n\nexport const ANIMATION_EASING = \".2s ease-in-out\";\n\nexport const BASE_AVATAR_STYLE = `\nobject-fit: cover;\nopacity: 1;\nuser-select: none;\nuser-drag: none;\ndisplay: inline-block;\nmargin-left: -10px;\nposition: relative;\n`\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { IAvatar, AvatarGroupOptions } from './types';\nimport { colorFromName, cleanSearchParams, boxShadows, ANIMATION_EASING, BASE_AVATAR_STYLE } from './utils';\nimport Tippy from '@tippyjs/react';\n\nconst Img = styled.img<AvatarGroupOptions & { isOverflowAvatar?: boolean }>`\n    height: ${props => props.size}px;\n    width: ${props => props.size}px;\n    transition: margin-left ${ANIMATION_EASING}, opacity ${ANIMATION_EASING}, width ${ANIMATION_EASING};\n    border-radius: ${props => props.square ? '0px' : '50%'};\n    box-shadow: ${props => props.shadow ? boxShadows[props.shadow] : 'none'};\n    ${BASE_AVATAR_STYLE}\n`;\n\ninterface ISingleAvatar {\n    avatar: string | IAvatar;\n    options: AvatarGroupOptions;\n    hidden?: boolean;\n    onClick?: React.MouseEventHandler<HTMLImageElement>;\n}\n\nexport default function SingleAvatar({ avatar, options, hidden, onClick }: ISingleAvatar) {\n    const size = options.size || 25;\n\n    if (typeof avatar === \"string\") {\n        const params = new URLSearchParams({\n            size: `${size * 2}`,\n            name: avatar,\n            \"font-size\": `${options.fontSize || 0.66}`,\n            color: options.fontColor || \"FFFFFF\",\n            background: options.backgroundColor || colorFromName(avatar, options.randomBackgroundColors),\n            bold: options.bold ? 'true' : '',\n            uppercase: options.uppercase ? '' : 'false',\n            length: options.initialCharacters ? `${options.initialCharacters}` : '',\n            rounded: options.square ? 'false ' : ''\n        });\n\n        cleanSearchParams(params);\n\n        return (\n            <Tippy content={avatar} arrow={options.tooltipArrow} disabled={options.hideTooltip}>\n                <Img\n                    draggable=\"false\"\n                    alt={`ui-avatar-${avatar}`}\n                    src={`https://ui-avatars.com/api/?${params.toString()}`}\n                    size={size}\n                    square={!!options.square}\n                    shadow={options.shadow}\n                    style={options.avatarStyle}\n                    className={hidden ? \"hidden\" : \"\"}\n                    onClick={onClick}\n                />\n            </Tippy>\n        )\n    } else {\n        const params = new URLSearchParams({\n            size: `${size * 2}`,\n            name: avatar.avatar,\n            \"font-size\": `${avatar.fontSize || options.fontSize || 0.66}`,\n            color: avatar.fontColor || options.fontColor || \"FFFFFF\",\n            background: avatar.backgroundColor || options.backgroundColor || colorFromName(avatar.avatar, options.randomBackgroundColors),\n            bold: options.bold ? 'true' : '',\n            uppercase: options.uppercase ? '' : 'false',\n            length: options.initialCharacters ? `${options.initialCharacters}` : '',\n            rounded: options.square ? 'false ' : ''\n        });\n\n        cleanSearchParams(params);\n\n        return (\n            <Tippy content={avatar.tooltip || avatar.avatar} arrow={options.tooltipArrow} disabled={options.hideTooltip}>\n                <Img\n                    draggable=\"false\"\n                    alt={`ui-avatar-${avatar.avatar}`}\n                    src={`https://ui-avatars.com/api/?${params.toString()}`}\n                    size={size}\n                    square={!!options.square}\n                    shadow={options.shadow}\n                    style={avatar.style || options.avatarStyle}\n                    className={hidden ? \"hidden\" : \"\"}\n                    onClick={onClick}\n                />\n            </Tippy>\n        )\n    }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { AvatarGroupOptions } from './types';\nimport { colorFromName, cleanSearchParams, boxShadows, ANIMATION_EASING, BASE_AVATAR_STYLE } from './utils';\n\nconst Img = styled.img<AvatarGroupOptions>`\n    height: ${props => props.size! - 4}px;\n    width: ${props => props.size! - 4}px;\n    transition: margin-left ${ANIMATION_EASING}, opacity ${ANIMATION_EASING}, width ${ANIMATION_EASING};\n    border-radius: ${props => props.square ? '0px' : '50%'};\n    box-shadow: ${props => props.shadow ? boxShadows[props.shadow] : 'none'};\n    border: 2px solid #${props => props.backgroundColor};\n    ${BASE_AVATAR_STYLE}\n`;\n\ninterface IOverflowAvatar {\n    avatar: string;\n    options: AvatarGroupOptions;\n    hidden?: boolean;\n}\n\nexport default function OverflowAvatar({ avatar, options, hidden }: IOverflowAvatar) {\n    const size = options.size || 25;\n    const backgroundColor = options.fontColor || options.backgroundColor || colorFromName(avatar, options.randomBackgroundColors);\n\n    let fontSize = options.fontSize || 0.66;\n    if (avatar.length === 3) {\n        if (!options.fontSize || options.fontSize > 0.42) {\n            // If the custom font size is less than the minimum of 0.42, don't override it.\n            fontSize = 0.42;\n        }\n    } else if (avatar.length > 3) {\n        if (!options.fontSize || options.fontSize > 0.32) {\n            // If the custom font size is less than the minimum of 0.32, don't override it.\n            fontSize = 0.32;\n        }\n    }\n\n    const params = new URLSearchParams({\n        size: `${size * 2}`,\n        name: avatar,\n        \"font-size\": `${fontSize}`,\n        color: backgroundColor,\n        background: \"FFFFFF\",\n        bold: options.bold ? 'true' : '',\n        uppercase: options.uppercase ? '' : 'false',\n        length: '5',\n        rounded: options.square ? 'false ' : ''\n    });\n\n    cleanSearchParams(params);\n\n    return (\n        <Img\n            draggable=\"false\"\n            alt={`ui-avatar-${avatar}`}\n            src={`https://ui-avatars.com/api/?${params.toString()}`}\n            size={size}\n            square={!!options.square}\n            shadow={options.shadow}\n            style={options.avatarStyle}\n            className={hidden ? \"overflow-hidden\" : \"\"}\n            backgroundColor={backgroundColor}\n        />\n    )\n}\n","import { Global, css } from '@emotion/react'\n\n// TODO: instead of Global styles, use JSX Pragma: https://emotion.sh/docs/css-prop#jsx-pragma\n\nexport default ({ tooltipStyle }: { tooltipStyle?: React.CSSProperties }) => <Global styles={css`\n    .tippy-box[data-animation=\"fade\"][data-state=\"hidden\"] {\n        opacity: 0;\n    }\n    [data-tippy-root] {\n        max-width: calc(100vw - 10px);\n    }\n    .tippy-box {\n        position: relative;\n        background-color: rgba(97, 97, 97, 0.92);\n        color: #fff;\n        border-radius: 4px;\n        font-size: 0.6875rem;\n        max-width: 300px;\n        margin: 2px;\n        word-wrap: break-word;\n        font-weight: 500;\n        outline: 0;\n        transition-property: transform, visibility, opacity;\n        ${tooltipStyle && css(tooltipStyle as Record<string, any>)}\n    }\n    .tippy-box[data-placement^=\"top\"] > .tippy-arrow {\n        bottom: 0;\n    }\n    .tippy-box[data-placement^=\"top\"] > .tippy-arrow:before {\n        bottom: -7px;\n        left: 0;\n        border-width: 8px 8px 0;\n        border-top-color: initial;\n        transform-origin: center top;\n    }\n    .tippy-box[data-placement^=\"bottom\"] > .tippy-arrow {\n        top: 0;\n    }\n    .tippy-box[data-placement^=\"bottom\"] > .tippy-arrow:before {\n        top: -7px;\n        left: 0;\n        border-width: 0 8px 8px;\n        border-bottom-color: initial;\n        transform-origin: center bottom;\n    }\n    .tippy-box[data-placement^=\"left\"] > .tippy-arrow {\n        right: 0;\n    }\n    .tippy-box[data-placement^=\"left\"] > .tippy-arrow:before {\n        border-width: 8px 0 8px 8px;\n        border-left-color: initial;\n        right: -7px;\n        transform-origin: center left;\n    }\n    .tippy-box[data-placement^=\"right\"] > .tippy-arrow {\n        left: 0;\n    }\n    .tippy-box[data-placement^=\"right\"] > .tippy-arrow:before {\n        left: -7px;\n        border-width: 8px 8px 8px 0;\n        border-right-color: initial;\n        transform-origin: center right;\n    }\n    .tippy-box[data-inertia][data-state=\"visible\"] {\n        transition-timing-function: cubic-bezier(0.54, 1.5, 0.38, 1.11);\n    }\n    .tippy-arrow {\n        width: 16px;\n        height: 16px;\n        color: ${(tooltipStyle && tooltipStyle.backgroundColor) ? tooltipStyle.backgroundColor : \"rgba(97, 97, 97, 0.92)\" };\n    }\n    .tippy-arrow:before {\n        content: \"\";\n        position: absolute;\n        border-color: transparent;\n        border-style: solid;\n    }\n    .tippy-content {\n        position: relative;\n        padding: 4px 8px;\n        z-index: 1;\n    }\n`} />\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport SingleAvatar from './SingleAvatar';\nimport OverflowAvatar from './OverflowAvatar';\nimport { AvatarGroupOptions, IAvatar } from './types';\nimport TooltipStyles from './TooltipStyles';\n\nconst GroupDiv = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    & img:first-of-type {\n        margin-left: 3px;\n    }\n    &:hover img:nth-of-type(n+2) {\n        margin-left: 3px;\n    }\n    &:hover .overflow-hidden {\n        opacity: 0;\n    }\n    &:not(:hover) .hidden {\n        opacity: 0;\n        width: 0;\n        margin-left: 0;\n    }\n`\n\ninterface IAvatarGroup extends AvatarGroupOptions {\n    // Array of strings with avatar names or Avatar object for more control\n    avatars: (string | IAvatar)[];\n}\n\nexport default function AvatarGroup(props: IAvatarGroup) {\n    const [overrideMax, setOverrideMax] = useState<boolean>(false);\n\n    if (props.avatars.length === 0) {\n        return <></>;\n    } else {\n        if (props.max && props.avatars.length > props.max) {\n            if (props.displayAllOnHover) {\n                return (\n                    <GroupDiv style={props.style} onMouseEnter={_ => setOverrideMax(true)} onMouseLeave={_ => setOverrideMax(false)}>\n                        {props.avatars.map((ele, i) =>\n                            <SingleAvatar\n                                avatar={ele}\n                                options={props}\n                                hidden={i >= (props.max as number)}\n                                key={\"avatar-max-\" + i}\n                                onClick={_ => props.onAvatarClick && props.onAvatarClick(ele, i)}\n                            />)\n                        }\n                        <OverflowAvatar avatar={`+${props.avatars.length - props.max}`} options={props} key=\"avatar-overflow\" hidden={overrideMax} />\n                        {!props.hideTooltip && <TooltipStyles tooltipStyle={props.tooltipStyle} />}\n                    </GroupDiv>\n                );\n            } else {\n                return (\n                    <GroupDiv style={props.style}>\n                        {props.avatars.slice(0, props.max).map((ele, i) =>\n                            <SingleAvatar\n                                avatar={ele}\n                                options={props}\n                                key={\"avatar-max-\" + i}\n                                onClick={_ => props.onAvatarClick && props.onAvatarClick(ele, i)}\n                            />)\n                        }\n                        <OverflowAvatar avatar={`+${props.avatars.length - props.max}`} options={props} key=\"avatar-overflow\" />\n                        {!props.hideTooltip && <TooltipStyles tooltipStyle={props.tooltipStyle} />}\n                    </GroupDiv>\n                );\n            }\n        } else {\n            return (\n                <GroupDiv style={props.style}>\n                    {props.avatars.map((ele, i) =>\n                        <SingleAvatar\n                            avatar={ele}\n                            options={props}\n                            key={\"avatar-nomax-\" + i}\n                            onClick={_ => props.onAvatarClick && props.onAvatarClick(ele, i)}\n                        />)\n                    }\n                    {!props.hideTooltip && <TooltipStyles tooltipStyle={props.tooltipStyle} />}\n                </GroupDiv>\n            );\n        }\n    }\n}\n"],"names":["randomAvatarColor","colorFromName","name","avatarColors","hash","len","length","i","charCodeAt","Math","abs","cleanSearchParams","params","Array","from","entries","forEach","key","value","delete","boxShadows","BASE_AVATAR_STYLE","Img","styled","img","props","size","square","shadow","SingleAvatar","avatar","options","hidden","onClick","URLSearchParams","fontSize","color","fontColor","background","backgroundColor","randomBackgroundColors","bold","uppercase","initialCharacters","rounded","_jsx","Tippy","content","arrow","tooltipArrow","disabled","hideTooltip","draggable","alt","src","toString","style","avatarStyle","className","tooltip","OverflowAvatar","tooltipStyle","Global","styles","css","GroupDiv","div","AvatarGroup","overrideMax","setOverrideMax","useState","avatars","_jsxs","max","displayAllOnHover","onMouseEnter","_","onMouseLeave","map","ele","onAvatarClick","TooltipStyles","slice"],"mappings":"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"}